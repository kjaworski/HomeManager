name: 'CI/CD Pipeline'

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  DOTNET_VERSION: '10.0.x'
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true

jobs:
  # Build and test .NET projects
  build-and-test:
    name: 'Build and Test'
    runs-on: ubuntu-latest
    
    steps:
    - name: 'Checkout'
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 'Setup .NET'
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: 'Restore dependencies'
      run: dotnet restore HomeManager.sln

    - name: 'Build solution'
      run: dotnet build HomeManager.sln --no-restore --configuration Release

    - name: 'Run unit tests'
      run: dotnet test HomeManager.sln --no-build --configuration Release --verbosity normal --collect:"XPlat Code Coverage" --logger trx --results-directory coverage

    - name: 'Upload test results'
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: coverage/**/*.trx

    - name: 'Upload coverage reports'
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-reports
        path: coverage/**/*.xml

  # Code quality checks
  code-quality:
    name: 'Code Quality'
    runs-on: ubuntu-latest
    
    steps:
    - name: 'Checkout'
      uses: actions/checkout@v4

    - name: 'Setup .NET'
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: 'Restore dependencies'
      run: dotnet restore HomeManager.sln

    - name: 'Check formatting'
      run: dotnet format HomeManager.sln --verify-no-changes --verbosity normal

    - name: 'Run static analysis'
      run: dotnet build HomeManager.sln --configuration Release --verbosity normal

  # Security scanning
  security-scan:
    name: 'Security Scan'
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
      actions: read
    
    steps:
    - name: 'Checkout'
      uses: actions/checkout@v4

    - name: 'Initialize CodeQL'
      uses: github/codeql-action/init@v3
      with:
        languages: csharp
        queries: security-extended,security-and-quality

    - name: 'Setup .NET'
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: 'Build for CodeQL'
      run: |
        dotnet restore HomeManager.sln
        dotnet build HomeManager.sln --configuration Release

    - name: 'Perform CodeQL Analysis'
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:csharp"

  # Validate documentation
  validate-docs:
    name: 'Validate Documentation'
    runs-on: ubuntu-latest
    
    steps:
    - name: 'Checkout'
      uses: actions/checkout@v4

    - name: 'Check for broken links'
      uses: gaurav-nelson/github-action-markdown-link-check@v1
      with:
        use-quiet-mode: 'yes'
        use-verbose-mode: 'yes'
        config-file: '.github/mlc_config.json'

    - name: 'Lint markdown files'
      uses: nosborn/github-action-markdown-cli@v3.3.0
      with:
        files: '**/*.md'
        config_file: '.github/markdownlint.json'

  # PR-specific validations
  pr-validations:
    name: 'PR Validations'
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    
    steps:
    - name: 'Checkout'
      uses: actions/checkout@v4

    - name: 'Validate PR title'
      uses: amannn/action-semantic-pull-request@v5
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        types: |
          feat
          fix
          docs
          style
          refactor
          test
          chore
          build
          ci
        scopes: |
          api
          identity
          todo
          budget
          ai
          docs
          infra
        requireScope: false

    - name: 'Check for AI development patterns'
      run: |
        echo "Validating AI-assisted development patterns..."
        
        # Check for proper XML documentation on public APIs
        if git diff --name-only origin/main...HEAD | grep -E '\.(cs)$'; then
          echo "C# files modified, checking for XML documentation..."
          # Add more specific checks here
        fi
        
        # Check for proper error handling patterns
        if git diff --name-only origin/main...HEAD | grep -E 'Controllers/.*\.cs$'; then
          echo "Controller files modified, checking for error handling..."
          # Add controller-specific checks here
        fi

  # Aggregate status check
  all-checks:
    name: 'All Checks Complete'
    runs-on: ubuntu-latest
    needs: [build-and-test, code-quality, security-scan, validate-docs]
    if: always()
    
    steps:
    - name: 'Check all jobs'
      run: |
        if [[ "${{ needs.build-and-test.result }}" != "success" ]]; then
          echo "Build and test failed"
          exit 1
        fi
        if [[ "${{ needs.code-quality.result }}" != "success" ]]; then
          echo "Code quality checks failed"
          exit 1
        fi
        if [[ "${{ needs.security-scan.result }}" != "success" ]]; then
          echo "Security scan failed"
          exit 1
        fi
        if [[ "${{ needs.validate-docs.result }}" != "success" ]]; then
          echo "Documentation validation failed"
          exit 1
        fi
        echo "All checks passed successfully!"
        
        # Show manual workflow info
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "ðŸš€ Manual workflow completed successfully"
        fi