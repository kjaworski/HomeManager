openapi: 3.0.3
info:
  title: HomeManager Identity Service API
  description: |
    Authentication, authorization, and family management service for HomeManager system.
    Handles user registration, login, JWT token management, and family group administration.
  version: 1.0.0
  contact:
    name: HomeManager Development Team
    url: https://github.com/kjaworski/HomeManager
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.homemanager.local/identity
    description: Local development server
  - url: https://api.homemanager.com/identity
    description: Production server

security:
  - bearerAuth: []

paths:
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register new user account
      description: Create a new user account with email and password
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistrationRequest'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Invalid registration data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticate user with email and password, returns JWT token
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh JWT token
      description: Generate new access token using refresh token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '401':
          description: Invalid refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/profile:
    get:
      tags:
        - User Management
      summary: Get user profile
      description: Retrieve current user profile information
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags:
        - User Management
      summary: Update user profile
      description: Update current user profile information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfileRequest'
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '400':
          description: Invalid profile data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /families:
    get:
      tags:
        - Family Management
      summary: Get user's families
      description: Retrieve all families the user belongs to
      responses:
        '200':
          description: Families retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  families:
                    type: array
                    items:
                      $ref: '#/components/schemas/Family'

    post:
      tags:
        - Family Management
      summary: Create new family
      description: Create a new family group and become the admin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFamilyRequest'
      responses:
        '201':
          description: Family created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Family'

  /families/{familyId}/members:
    get:
      tags:
        - Family Management
      summary: Get family members
      description: Retrieve all members of a specific family
      parameters:
        - name: familyId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Family members retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  members:
                    type: array
                    items:
                      $ref: '#/components/schemas/FamilyMember'

    post:
      tags:
        - Family Management
      summary: Invite family member
      description: Send invitation to join family
      parameters:
        - name: familyId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InviteMemberRequest'
      responses:
        '201':
          description: Invitation sent successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvitationResponse'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    UserRegistrationRequest:
      type: object
      required:
        - email
        - password
        - firstName
        - lastName
      properties:
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        password:
          type: string
          minLength: 8
          example: "SecurePassword123!"
        firstName:
          type: string
          example: "John"
        lastName:
          type: string
          example: "Doe"
        displayName:
          type: string
          example: "John D."

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        password:
          type: string
          example: "SecurePassword123!"

    LoginResponse:
      type: object
      properties:
        accessToken:
          type: string
          description: JWT access token
        refreshToken:
          type: string
          description: Refresh token for obtaining new access tokens
        expiresIn:
          type: integer
          description: Token expiration time in seconds
          example: 3600
        user:
          $ref: '#/components/schemas/UserProfile'

    RefreshTokenRequest:
      type: object
      required:
        - refreshToken
      properties:
        refreshToken:
          type: string

    TokenResponse:
      type: object
      properties:
        accessToken:
          type: string
        expiresIn:
          type: integer
          example: 3600

    UserResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        firstName:
          type: string
        lastName:
          type: string
        displayName:
          type: string
        createdAt:
          type: string
          format: date-time

    UserProfile:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        firstName:
          type: string
        lastName:
          type: string
        displayName:
          type: string
        profilePicture:
          type: string
          format: uri
        timezone:
          type: string
          example: "America/New_York"
        language:
          type: string
          example: "en-US"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    UpdateProfileRequest:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        displayName:
          type: string
        timezone:
          type: string
        language:
          type: string

    Family:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: "The Smith Family"
        description:
          type: string
          example: "Our family home management"
        adminId:
          type: string
          format: uuid
        memberCount:
          type: integer
          example: 4
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CreateFamilyRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          example: "The Smith Family"
        description:
          type: string
          example: "Our family home management"

    FamilyMember:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        firstName:
          type: string
        lastName:
          type: string
        displayName:
          type: string
        role:
          type: string
          enum: [admin, member]
        joinedAt:
          type: string
          format: date-time

    InviteMemberRequest:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email
          example: "jane.doe@example.com"
        role:
          type: string
          enum: [admin, member]
          default: member

    InvitationResponse:
      type: object
      properties:
        invitationId:
          type: string
          format: uuid
        email:
          type: string
          format: email
        familyId:
          type: string
          format: uuid
        status:
          type: string
          enum: [pending, accepted, rejected]
        createdAt:
          type: string
          format: date-time

    ErrorResponse:
      type: object
      required:
        - error
        - message
        - timestamp
      properties:
        error:
          type: string
          description: Error code
          example: "VALIDATION_ERROR"
        message:
          type: string
          description: Human-readable error message
          example: "Invalid email format"
        details:
          type: object
          description: Additional error details
        timestamp:
          type: string
          format: date-time
        traceId:
          type: string
          description: Request trace ID for debugging